<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>3D First Person Simulator with Bullet Time, Boost Arc, & Zoom Effects</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/PointerLockControls.js"></script>
  <style>
    body { margin: 0; overflow: hidden; }
    #startButton {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      font-size: 20px;
      cursor: pointer;
    }
    #velocityDisplay {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      background: rgba(0,0,0,0.5);
      color: #fff;
      font-family: monospace;
      font-size: 14px;
      border-radius: 5px;
    }
    #vignette {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0) 50%, rgba(0,0,0,0.85) 100%);
      opacity: 0;
      z-index: 5;
    }
    #deathScreen {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.85);
      color: white;
      font-size: 48px;
      z-index: 10;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }
    #restartButton {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 24px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <button id="startButton">Click to Start</button>
  <div id="velocityDisplay">Velocity: (0, 0, 0)</div>
  <div id="vignette"></div>
  <div id="deathScreen">
    You Died
    <button id="restartButton">Restart</button>
  </div>
  <script>
    let scene, renderer, controls, floorMesh;
    let player, tiltHolder, camera;
    let moveForward = false, moveBackward = false, moveLeft = false, moveRight = false;
    let canJump = false;
    let velocity = new THREE.Vector3();
    let clock = new THREE.Clock();
    let blocks = [];
    let bouncyBlocks = []; // Array for bouncy blocks
    
    let desiredFOV = 80;
    let jumpKeyPressed = false;
    let jumpTimer = 0;
    const gravity = -60;
    const standingHeight = 5;
    const crouchHeight = 2;
    const standingColliderOffset = 3.5;
    const crouchColliderOffset = 1.5;
    const coyoteTime = 0.1;
    let coyoteTimer = 0;
    const playerColliderRadius = 1.5;
    const baseJumpSpeed = 30;
    const additionalJumpAcceleration = 5;
    const maxJumpHold = 0.05;
    let isCrouching = false;
    let bulletTimeActive = false;
    let bulletTimeTimer = 0;
    const bulletTimeDuration = 1.5;
    const bulletTimeFactor = 0.1;
    let bulletTimeAvailable = true;
    const boostSpeed = 80;
    const normalZoom = 1;
    const outZoom = 0.5;
    const groundAccelerationFactor = 400;
    const groundMaxAdditionalSpeed = 40;
    const groundDamping = 0.8;
    const airAccelerationFactor = 100;
    const airMaxAdditionalSpeed = 20;
    const airDamping = 0.99;
    let currentColliderOffsetSmooth = standingColliderOffset;
    const heightTransitionSpeed = 5;
    const bobbingFrequency = 16;
    const bobbingAmplitude = 0.5;
    let effectTime = 0;
    const cameraPitchTransitionSpeed = 5;
    let targetCameraPitch = 0;
    let raycaster = new THREE.Raycaster();
    const baseOffsets = [
      new THREE.Vector3(0, 0, 0),
      new THREE.Vector3(0.75, 0, 0),
      new THREE.Vector3(-0.75, 0, 0),
      new THREE.Vector3(0, 0, 0.75),
      new THREE.Vector3(0, 0, -0.75)
    ];
    let vignetteOverlay;
    let isDead = false;
    let trajectoryRibbon = null;
    let delayedBoostDir = new THREE.Vector3();
    let delayedStartPos = new THREE.Vector3();
    let shakeDuration = 0;
    let shakeMagnitude = 0;
    let currentShakeOffset = new THREE.Vector3();
    let wasOnGround = false;
    let wasColliding = false;
    let previousYVelocity = 0;

    function triggerCameraShake(magnitude, duration) {
      shakeMagnitude = magnitude;
      shakeDuration = duration;
    }

    function updateTrajectoryArc() {
      let currentBoostDir = new THREE.Vector3();
      camera.getWorldDirection(currentBoostDir);
      currentBoostDir.y += 0.2;
      currentBoostDir.normalize();
      
      let rightVector = new THREE.Vector3().crossVectors(currentBoostDir, new THREE.Vector3(0,1,0)).normalize();
      let horizVel = new THREE.Vector3(velocity.x, 0, velocity.z);
      let rightDot = horizVel.dot(rightVector);
      let offsetMag = 1.0;
      let lateralOffset = new THREE.Vector3();
      if (rightDot < 0) {
        lateralOffset.copy(rightVector).multiplyScalar(offsetMag);
      } else if (rightDot > 0) {
        lateralOffset.copy(rightVector).multiplyScalar(-offsetMag);
      }
      
      let basePos = player.position.clone().sub(new THREE.Vector3(0, 1.5, 0));
      let currentStartPos = basePos.add(lateralOffset);
      
      delayedBoostDir.lerp(currentBoostDir, 0.3);
      delayedStartPos.lerp(currentStartPos, 0.3);
      
      let startPos = delayedStartPos.clone();
      let initVel = delayedBoostDir.clone().multiplyScalar(boostSpeed);
      let gravityVec = new THREE.Vector3(0, gravity, 0);
      
      let points = [];
      points.push(startPos);
      
      let dtSample = 0.05;
      let maxTime = 2.0;
      let prevPos = startPos.clone();
      
      for (let t = dtSample; t <= maxTime; t += dtSample) {
        let pos = startPos.clone()
                   .add(initVel.clone().multiplyScalar(t))
                   .add(gravityVec.clone().multiplyScalar(0.5 * t * t));
        let segment = pos.clone().sub(prevPos);
        let segLength = segment.length();
        if (segLength > 0) {
          let rayDir = segment.clone().normalize();
          raycaster.set(prevPos, rayDir);
          let intersections = raycaster.intersectObjects([floorMesh, ...blocks, ...bouncyBlocks], true);
          if (intersections.length > 0 && intersections[0].distance <= segLength) {
            pos = intersections[0].point;
            points.push(pos);
            break;
          }
        }
        points.push(pos);
        prevPos = pos;
      }
      
      let maxWidth = 1.0;
      let minWidth = 0.5;
      let positions = [];
      let indices = [];
      
      for (let i = 0; i < points.length; i++) {
        let p = points[i];
        let tangent;
        if (i === 0) {
          tangent = points[1].clone().sub(points[0]).normalize();
        } else if (i === points.length - 1) {
          tangent = points[i].clone().sub(points[i - 1]).normalize();
        } else {
          tangent = points[i + 1].clone().sub(points[i - 1]).normalize();
        }
        let up = new THREE.Vector3(0, 1, 0);
        let right = new THREE.Vector3().crossVectors(tangent, up).normalize();
        if (right.length() < 0.001) {
          right = new THREE.Vector3(1, 0, 0);
        }
        
        let u = i / (points.length - 1);
        let width = THREE.MathUtils.lerp(maxWidth, minWidth, u);
        let halfWidth = width / 2;
        
        let leftPoint = p.clone().sub(right.clone().multiplyScalar(halfWidth));
        let rightPoint = p.clone().add(right.clone().multiplyScalar(halfWidth));
        
        positions.push(leftPoint.x, leftPoint.y, leftPoint.z);
        positions.push(rightPoint.x, rightPoint.y, rightPoint.z);
      }
      
      for (let i = 0; i < points.length - 1; i++) {
        let base = i * 2;
        indices.push(base, base + 1, base + 2);
        indices.push(base + 1, base + 3, base + 2);
      }
      
      let geometry;
      if (trajectoryRibbon === null) {
        geometry = new THREE.BufferGeometry();
        geometry.setAttribute("position", new THREE.Float32BufferAttribute(positions, 3));
        geometry.setIndex(indices);
        let material = new THREE.MeshBasicMaterial({ 
          color: 0xADD8E6, 
          transparent: true, 
          opacity: 0.4, 
          side: THREE.DoubleSide,
          blending: THREE.MultiplyBlending,
          depthWrite: false
        });
        trajectoryRibbon = new THREE.Mesh(geometry, material);
        scene.add(trajectoryRibbon);
      } else {
        geometry = trajectoryRibbon.geometry;
        geometry.setAttribute("position", new THREE.Float32BufferAttribute(positions, 3));
        geometry.setIndex(indices);
        geometry.attributes.position.needsUpdate = true;
      }
    }

    function updateGroundCollision() {
      const collidables = [floorMesh, ...blocks, ...bouncyBlocks];
      let highestY = -Infinity;
      let landedOnBouncy = false;
      let bouncyBlock = null;
      
      for (let offset of baseOffsets) {
        let origin = player.position.clone().add(offset).add(new THREE.Vector3(0, 0.1, 0));
        raycaster.set(origin, new THREE.Vector3(0, -1, 0));
        let intersections = raycaster.intersectObjects(collidables, false);
        if (intersections.length > 0) {
          let iy = intersections[0].point.y;
          if (iy > highestY) {
            highestY = iy;
            if (bouncyBlocks.includes(intersections[0].object)) {
              landedOnBouncy = true;
              bouncyBlock = intersections[0].object;
            } else {
              landedOnBouncy = false;
            }
          }
        }
      }

      if (highestY > -Infinity && ((player.position.y - currentColliderOffsetSmooth) - highestY) < 0.1) {
        player.position.y = highestY + currentColliderOffsetSmooth;
        if (landedOnBouncy && previousYVelocity < -10) {
          // Bouncy block effect: bounce height based on downward velocity
          const bounceFactor = 0.8; // How much velocity is preserved
          const minBounce = 20;     // Minimum bounce velocity
          const velocityBounce = Math.abs(previousYVelocity) * bounceFactor;
          velocity.y = Math.max(velocityBounce, minBounce);
          canJump = false;
          bulletTimeAvailable = true; // Reset boost on bouncy block
          triggerCameraShake(Math.min(Math.abs(previousYVelocity) / 80, 0.5), 0.2);
          
          // Slight scale animation for bouncy block feedback
          bouncyBlock.scale.y = 0.8;
          setTimeout(() => {
            bouncyBlock.scale.y = 1;
          }, 100);
        } else {
          velocity.y = 0;
          canJump = true;
          bulletTimeAvailable = true;
        }
      } else {
        canJump = false;
      }
    }

    function updateCeilingCollision() {
      const collidables = [floorMesh, ...blocks, ...bouncyBlocks];
      let headOrigin = player.position.clone()
                          .sub(new THREE.Vector3(0, currentColliderOffsetSmooth, 0))
                          .add(new THREE.Vector3(0, 2 * playerColliderRadius, 0));
      raycaster.set(headOrigin, new THREE.Vector3(0, 1, 0));
      let intersections = raycaster.intersectObjects(collidables, false);
      if (intersections.length > 0) {
        let dist = intersections[0].distance;
        if (dist < 1) {
          player.position.y = intersections[0].point.y - (2 * playerColliderRadius - currentColliderOffsetSmooth);
          if (velocity.y > 0) velocity.y = 0;
        }
      }
    }

    function handleHorizontalCollisions() {
      let collisionDetected = false;
      let playerCenter = new THREE.Vector3(player.position.x, player.position.y, player.position.z);
      let playerMinY = player.position.y - currentColliderOffsetSmooth;
      let playerMaxY = playerMinY + 2 * playerColliderRadius;
      
      const groundThreshold = 0.4;
      
      [...blocks, ...bouncyBlocks].forEach(block => {
        let box = new THREE.Box3().setFromObject(block);
        if (Math.abs(playerMinY - box.max.y) < groundThreshold) return;
        if (box.max.y < playerMinY || box.min.y > playerMaxY) return;
        
        let closestPoint = box.clampPoint(playerCenter, new THREE.Vector3());
        let diff = new THREE.Vector3(player.position.x - closestPoint.x, 0, player.position.z - closestPoint.z);
        let distance = diff.length();
        
        if (distance < playerColliderRadius) {
          collisionDetected = true;
          let penetrationDepth = playerColliderRadius - distance;
          if (distance > 0.0001) {
            diff.normalize();
          } else {
            diff.set(1, 0, 0);
          }
          let smoothingFactor = canJump ? 0.5 : 1.0;
          player.position.x += diff.x * penetrationDepth * smoothingFactor;
          player.position.z += diff.z * penetrationDepth * smoothingFactor;
          
          let horizontalVel = new THREE.Vector3(velocity.x, 0, velocity.z);
          let dot = horizontalVel.dot(diff);
          if (dot < 0) {
            let pushBack = diff.clone().multiplyScalar(dot);
            velocity.x -= pushBack.x;
            velocity.z -= pushBack.z;
          }
        }
      });
      return collisionDetected;
    }

    function onKeyDown(event) {
      switch (event.code) {
        case 'KeyW': moveForward = true; break;
        case 'KeyS': moveBackward = true; break;
        case 'KeyA': moveLeft = true; break;
        case 'KeyD': moveRight = true; break;
        case 'Space':
          isCrouching = false;
          if (canJump || coyoteTimer > 0) {
            jumpKeyPressed = true;
            jumpTimer = 0;
            velocity.y = baseJumpSpeed;
            canJump = false;
            coyoteTimer = 0;
          } else {
            let forward = new THREE.Vector3();
            camera.getWorldDirection(forward);
            forward.y = 0;
            forward.normalize();
            raycaster.set(player.position, forward);
            let wallIntersections = raycaster.intersectObjects([...blocks, ...bouncyBlocks], true);
            if (wallIntersections.length > 0 && wallIntersections[0].distance < 3) {
              jumpKeyPressed = true;
              jumpTimer = 0;
              velocity.y = baseJumpSpeed * 0.8;
              let wallNormal = wallIntersections[0].face.normal.clone();
              wallNormal.transformDirection(wallIntersections[0].object.matrixWorld);
              let pushFactor = 30;
              velocity.x += wallNormal.x * pushFactor;
              velocity.z += wallNormal.z * pushFactor;
              bulletTimeAvailable = true;
            } else if (!bulletTimeActive && bulletTimeAvailable) {
              bulletTimeActive = true;
              bulletTimeTimer = 0;
              bulletTimeAvailable = false;
            }
          }
          break;
        case 'KeyC':
          isCrouching = !isCrouching;
          break;
      }
    }

    function onKeyUp(event) {
      if (event.code === 'Space') jumpKeyPressed = false;
      if (event.code === 'KeyW') moveForward = false;
      if (event.code === 'KeyS') moveBackward = false;
      if (event.code === 'KeyA') moveLeft = false;
      if (event.code === 'KeyD') moveRight = false;
    }

    function animate() {
      if (isDead) return;
      requestAnimationFrame(animate);
      let delta = clock.getDelta();
      previousYVelocity = velocity.y;
      
      let dt = bulletTimeActive ? delta * bulletTimeFactor : delta;
      
      if (bulletTimeActive) {
        bulletTimeTimer += delta;
        updateTrajectoryArc();
        if (bulletTimeTimer < 1.3) {
          let t = bulletTimeTimer / 1.3;
          let smoothT = 1 - Math.pow(1 - t, 3);
          camera.zoom = THREE.MathUtils.lerp(normalZoom, outZoom, smoothT);
          vignetteOverlay.style.opacity = smoothT;
        } else if (bulletTimeTimer < bulletTimeDuration) {
          let t = (bulletTimeTimer - 1.3) / (bulletTimeDuration - 1.3);
          let easeVal = Math.pow(t, 3);
          camera.zoom = THREE.MathUtils.lerp(outZoom, normalZoom, easeVal);
          vignetteOverlay.style.opacity = THREE.MathUtils.lerp(1, 0, easeVal);
        }
        camera.updateProjectionMatrix();
        if (bulletTimeTimer >= bulletTimeDuration) {
          bulletTimeActive = false;
          camera.zoom = normalZoom;
          camera.updateProjectionMatrix();
          vignetteOverlay.style.opacity = 0;
          if (trajectoryRibbon) {
            scene.remove(trajectoryRibbon);
            trajectoryRibbon = null;
          }
          let boostDir = new THREE.Vector3();
          camera.getWorldDirection(boostDir);
          boostDir.y += 0.2;
          boostDir.normalize();
          velocity.x = boostDir.x * boostSpeed;
          velocity.y = boostDir.y * boostSpeed;
          velocity.z = boostDir.z * boostSpeed;
          desiredFOV = 85;
        }
      } else {
        if (camera.zoom !== normalZoom) {
          camera.zoom = THREE.MathUtils.lerp(camera.zoom, normalZoom, delta * 5);
          camera.updateProjectionMatrix();
        }
      }
      
      if (canJump) {
        coyoteTimer = coyoteTime;
      } else {
        coyoteTimer = Math.max(0, coyoteTimer - dt);
      }
      
      let targetColliderOffset = isCrouching ? crouchColliderOffset : standingColliderOffset;
      currentColliderOffsetSmooth = THREE.MathUtils.lerp(currentColliderOffsetSmooth, targetColliderOffset, dt * heightTransitionSpeed);
      
      const speedMultiplier = isCrouching ? 0.5 : 1.0;
      const currentAcceleration = (canJump ? groundAccelerationFactor : airAccelerationFactor) * speedMultiplier;
      const maxAdditional = (canJump ? groundMaxAdditionalSpeed : airMaxAdditionalSpeed) * speedMultiplier;
      
      let inputAccel = new THREE.Vector3();
      if (moveForward) inputAccel.z -= currentAcceleration * dt;
      if (moveBackward) inputAccel.z += currentAcceleration * dt;
      if (moveLeft) inputAccel.x -= currentAcceleration * dt;
      if (moveRight) inputAccel.x += currentAcceleration * dt;
      
      let worldAccel = inputAccel.clone();
      worldAccel.applyQuaternion(player.quaternion);
      worldAccel.y = 0;
      
      let horizVelocity = new THREE.Vector3(velocity.x, 0, velocity.z);
      let currentHorizSpeed = horizVelocity.length();
      let allowedAddition = maxAdditional - currentHorizSpeed;
      if (allowedAddition < 0) allowedAddition = 0;
      if (horizVelocity.length() > 0.001) {
        let parallel = worldAccel.clone().projectOnVector(horizVelocity);
        let perpendicular = worldAccel.clone().sub(parallel);
        let parallelMag = parallel.length();
        if (parallelMag > allowedAddition) {
          parallel.multiplyScalar(allowedAddition / parallelMag);
        }
        worldAccel.copy(parallel).add(perpendicular);
      }
      
      velocity.x += worldAccel.x;
      velocity.z += worldAccel.z;
      
      let effectiveDamping = canJump ? groundDamping : airDamping;
      velocity.x *= effectiveDamping;
      velocity.z *= effectiveDamping;
      
      velocity.y += gravity * dt;
      if (jumpKeyPressed && jumpTimer < maxJumpHold) {
        velocity.y += additionalJumpAcceleration * dt;
        jumpTimer += dt;
      }
      
      player.position.x += velocity.x * dt;
      player.position.z += velocity.z * dt;
      player.position.y += velocity.y * dt;
      
      let collisionOccurred = handleHorizontalCollisions();
      if (collisionOccurred && !wasColliding) {
        let horizSpeed = new THREE.Vector3(velocity.x, 0, velocity.z).length();
        if (horizSpeed > 40) {
          triggerCameraShake(Math.min(horizSpeed / 80, 1), 0.2);
        }
      }
      wasColliding = collisionOccurred;
      
      if (velocity.y < -0.1) {
        updateGroundCollision();
        if (canJump && !wasOnGround) {
          if (previousYVelocity < -40) {
            let impactIntensity = Math.min(Math.abs(previousYVelocity) / 80, 1);
            triggerCameraShake(impactIntensity, 0.3);
          }
        }
      }
      wasOnGround = canJump;
      
      if (velocity.y > 0) updateCeilingCollision();
      
      if (canJump) bulletTimeAvailable = true;
      
      let targetBobbing = 0;
      let targetRoll = 0;
      if (canJump && moveForward && (Math.abs(velocity.x) + Math.abs(velocity.z)) > 0.1) {
        effectTime += dt;
        targetBobbing = Math.sin(effectTime * bobbingFrequency) * bobbingAmplitude;
        targetRoll = Math.sin(effectTime * (bobbingFrequency / 2)) * 0.04;
      }
      camera.position.y = THREE.MathUtils.lerp(camera.position.y, targetBobbing, dt * 5);
      camera.rotation.z = THREE.MathUtils.lerp(camera.rotation.z, targetRoll, dt * (cameraPitchTransitionSpeed / 2));
      camera.rotation.x = THREE.MathUtils.lerp(camera.rotation.x, targetCameraPitch, dt * cameraPitchTransitionSpeed);
      
      camera.fov = THREE.MathUtils.lerp(camera.fov, desiredFOV, delta * 10);
      camera.updateProjectionMatrix();
      
      let baseCameraPos = camera.position.clone();
      if (shakeDuration > 0) {
        let targetShakeOffset = new THREE.Vector3(
          (Math.random() * 2 - 1) * shakeMagnitude,
          (Math.random() * 2 - 1) * shakeMagnitude,
          (Math.random() * 2 - 1) * shakeMagnitude * 0.1
        );
        currentShakeOffset.lerp(targetShakeOffset, 0.1);
        camera.position.add(currentShakeOffset);
        shakeDuration -= delta;
      } else {
        currentShakeOffset.lerp(new THREE.Vector3(0, 0, 0), 0.1);
        camera.position.add(currentShakeOffset);
      }
      
      const velDisplay = document.getElementById('velocityDisplay');
      velDisplay.innerText = `Velocity: (${velocity.x.toFixed(2)}, ${velocity.y.toFixed(2)}, ${velocity.z.toFixed(2)})`;
      
      renderer.render(scene, camera);
      camera.position.copy(baseCameraPos);
      
      if (player.position.y < -50) {
        isDead = true;
        document.exitPointerLock();
        document.getElementById('deathScreen').style.display = 'flex';
        return;
      }
    }

    function restartGame() {
      isDead = false;
      bulletTimeActive = false;
      bulletTimeTimer = 0;
      bulletTimeAvailable = true;
      jumpKeyPressed = false;
      jumpTimer = 0;
      coyoteTimer = 0;
      velocity.set(0, 0, 0);
      
      player.position.set(0, standingHeight, 0);
      player.rotation.set(0, 0, 0);
      tiltHolder.rotation.set(0, 0, 0);
      
      camera.zoom = normalZoom;
      camera.updateProjectionMatrix();
      
      effectTime = 0;
      clock = new THREE.Clock();
      
      if (trajectoryRibbon) {
        scene.remove(trajectoryRibbon);
        trajectoryRibbon = null;
      }
      
      document.getElementById('deathScreen').style.display = 'none';
      document.body.requestPointerLock();
      controls.lock();
      animate();
    }

    function init() {
      scene = new THREE.Scene();
      
      let skyGeometry = new THREE.SphereGeometry(500, 32, 32);
      let skyMaterial = new THREE.ShaderMaterial({
        uniforms: {
          topColor: { value: new THREE.Color(0x87CEEB) },
          bottomColor: { value: new THREE.Color(0xF0F8FF) },
          offset: { value: 33 },
          exponent: { value: 0.6 }
        },
        vertexShader: 
          `varying vec3 vWorldPosition;
          void main() {
            vec4 worldPosition = modelMatrix * vec4(position, 1.0);
            vWorldPosition = worldPosition.xyz;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }`,
        fragmentShader: 
          `uniform vec3 topColor;
          uniform vec3 bottomColor;
          uniform float offset;
          uniform float exponent;
          varying vec3 vWorldPosition;
          void main() {
            float h = normalize(vWorldPosition + offset).y;
            gl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h, 0.0), exponent), 0.0)), 1.0);
          }`,
        side: THREE.BackSide
      });
      let sky = new THREE.Mesh(skyGeometry, skyMaterial);
      scene.add(sky);
      
      player = new THREE.Object3D();
      player.position.set(0, standingHeight, 0);
      scene.add(player);
      
      tiltHolder = new THREE.Object3D();
      player.add(tiltHolder);
      
      camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, 0, 0);
      tiltHolder.add(camera);
      
      renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      document.body.appendChild(renderer.domElement);
      
      vignetteOverlay = document.getElementById('vignette');
      
      controls = new THREE.PointerLockControls(player, document.body);
      let startButton = document.getElementById('startButton');
      startButton.addEventListener('click', () => {
        document.body.requestPointerLock();
        controls.lock();
      });
      controls.addEventListener('lock', () => startButton.style.display = 'none');
      controls.addEventListener('unlock', () => startButton.style.display = 'block');
      
      let hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.7);
      hemiLight.position.set(0, 50, 0);
      scene.add(hemiLight);
      
      let dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
      dirLight.position.set(5, 20, 5);
      dirLight.castShadow = true;
      dirLight.shadow.mapSize.width = 2048;
      dirLight.shadow.mapSize.height = 2048;
      dirLight.shadow.camera.left = -50;
      dirLight.shadow.camera.right = 50;
      dirLight.shadow.camera.top = 50;
      dirLight.shadow.camera.bottom = -50;
      scene.add(dirLight);
      
      let floorGeometry = new THREE.PlaneGeometry(100, 100);
      let floorMaterial = new THREE.MeshStandardMaterial({ color: 0x808080, metalness: 0.3, roughness: 0.6 });
      floorMesh = new THREE.Mesh(floorGeometry, floorMaterial);
      floorMesh.rotation.x = -Math.PI / 2;
      floorMesh.receiveShadow = true;
      scene.add(floorMesh);
      
      // Ground Blocks
      for (let i = 0; i < 5; i++) {
        let blockGeometry = new THREE.BoxGeometry(8, 4, 8);
        let blockMaterial = new THREE.MeshStandardMaterial({
          color: Math.random() * 0xffffff,
          metalness: 0.5,
          roughness: 0.2
        });
        let block = new THREE.Mesh(blockGeometry, blockMaterial);
        block.position.set(Math.random() * 60 - 30, 2, Math.random() * 60 - 30);
        block.castShadow = true;
        block.receiveShadow = true;
        scene.add(block);
        blocks.push(block);
      }
      
      // Air Blocks
      for (let i = 0; i < 5; i++) {
        let blockGeometry = new THREE.BoxGeometry(8, 4, 8);
        let blockMaterial = new THREE.MeshStandardMaterial({
          color: Math.random() * 0xffffff,
          metalness: 0.5,
          roughness: 0.2
        });
        let block = new THREE.Mesh(blockGeometry, blockMaterial);
        block.position.set(Math.random() * 60 - 30, Math.random() * 8 + 6, Math.random() * 60 - 30);
        block.castShadow = true;
        block.receiveShadow = true;
        scene.add(block);
        blocks.push(block);
      }
      
      // Bouncy Blocks (Yellow and Flatter)
      for (let i = 0; i < 3; i++) {
        let bouncyGeometry = new THREE.BoxGeometry(10, 1, 10); // Flatter than normal blocks
        let bouncyMaterial = new THREE.MeshStandardMaterial({
          color: 0xffff00, // Yellow
          metalness: 0.2,
          roughness: 0.8,
          emissive: 0xffff00,
          emissiveIntensity: 0.2
        });
        let bouncyBlock = new THREE.Mesh(bouncyGeometry, bouncyMaterial);
        bouncyBlock.position.set(Math.random() * 60 - 30, 0.5, Math.random() * 60 - 30);
        bouncyBlock.castShadow = true;
        bouncyBlock.receiveShadow = true;
        scene.add(bouncyBlock);
        bouncyBlocks.push(bouncyBlock);
      }
      
      window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });
      
      document.addEventListener('keydown', onKeyDown);
      document.addEventListener('keyup', onKeyUp);
      
      document.getElementById('restartButton').addEventListener('click', restartGame);
      
      animate();
    }
    
    init();
  </script>
</body>
</html>
